name: Android Build & Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      ANDROID_SDK_ROOT: ${{ runner.tool_cache }}/android-sdk

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      - name: Setup Gradle CLI (for fallback wrapper generation)
        uses: gradle/actions/setup-gradle@v3

      - name: Show repo files (debug)
        run: |
          echo "Workspace: $GITHUB_WORKSPACE"
          ls -la
          echo "Top-level contents:"
          find . -maxdepth 2 -type f -print

      - name: Check Gradle wrapper jar and generate if missing
        run: |
          if [ -f gradle/wrapper/gradle-wrapper.jar ]; then
            echo "gradle-wrapper.jar found."
          else
            echo "gradle-wrapper.jar not found â€” attempting to generate wrapper using installed Gradle."
            # Attempt to generate wrapper. This requires gradle to be available via setup-gradle.
            # If you prefer a specific Gradle version, add --gradle-version X.Y.Z
            gradle wrapper || true
          fi
          echo "gradle/wrapper contents:"
          ls -la gradle/wrapper || true
        shell: bash

      - name: Grant execute permission for gradlew
        run: |
          if [ -f ./gradlew ]; then
            chmod +x ./gradlew
          else
            echo "gradlew not present; will try to use 'gradle' directly."
          fi
        shell: bash

      - name: Clean project
        run: |
          if [ -f ./gradlew ]; then
            ./gradlew clean --no-daemon --stacktrace
          else
            gradle clean --no-daemon --stacktrace
          fi
        shell: bash

      - name: Build Debug APK
        run: |
          if [ -f ./gradlew ]; then
            ./gradlew assembleDebug --no-daemon --stacktrace
          else
            gradle assembleDebug --no-daemon --stacktrace
          fi
        shell: bash

      - name: Run unit tests
        run: |
          if [ -f ./gradlew ]; then
            ./gradlew testDebugUnitTest --no-daemon --stacktrace || true
          else
            gradle testDebugUnitTest --no-daemon --stacktrace || true
          fi
        continue-on-error: true
        shell: bash

      - name: Upload build artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: app-debug
          path: app/build/outputs/apk/debug/app-debug.apk
          if-no-files-found: warn

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            **/build/test-results/testDebugUnitTest/
            **/build/reports/tests/testDebugUnitTest/
            **/build/test-results/test/
            **/build/reports/tests/
          if-no-files-found: warn

      - name: Test Report
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Unit Tests
          path: |
            **/build/test-results/testDebugUnitTest/*.xml
            **/build/test-results/test/*.xml
            **/build/test-results/**/*.xml
          reporter: java-junit
          fail-on-error: false
